*UCM.jax* For UCM.nvim                          vim: ft=help

==============================================================================
CONTENTS                                                 *UCM-contents*

  1. Introduction................................. |UCM-introduction|
  2. Usage........................................ |UCM-usage|
     - :UCM (Commands)............................ |UCM-commands-direct|
  3. Configuration................................ |UCM-configuration|
     - Setup...................................... |UCM-setup|
     - Project-specific Settings (.ucmrc)......... |UCM-ucmrc|
     - Full Configuration......................... |UCM-default-configuration|
  4. Lua API...................................... |UCM-api|
     - UCM.api (Core Engine)...................... |UCM-api-core|
  5. Integration Examples (neo-tree).............. |UCM-integration-examples|
  6. License...................................... |UCM-license|

==============================================================================
1. Introduction                                     *UCM-introduction*

*UCM.nvim* is a plugin for comfortably managing Unreal Engine C++ classes
(creating, switching files, renaming, deleting) from within Neovim.

Main Features:
- Data-driven Design:
  Define project-specific folder structures and class rules in a Lua table
  to enable flexible class file operations.
- UI Abstraction Layer:
  Automatically selects and uses Telescope, fzf-lua, or the native Neovim
  UI depending on your environment.
- Extensible API:
  Easily integrates with filer plugins like `neo-tree`.

==============================================================================
2. Usage                                                      *UCM-usage*

If a command is run without the required arguments, a UI picker will
automatically be launched to interactively gather the needed information.

------------------------------------------------------------------------------
:UCM (Commands)                                 *UCM-commands-direct*

These commands can be used directly by providing all arguments, which is ideal
for scripting and automation. If arguments are omitted, a UI will be launched.

:UCM new <ClassName> <ParentClass> [TargetDir]
    Creates a new class. If [TargetDir] is omitted, the current
    directory is used.

:UCM delete <Relative/Path/To/File>
    Deletes a class file. Both the header (.h) and source (.cpp) will be
    targeted. The file extension is optional.

:UCM rename <Relative/Path/To/File> <NewName>
    Renames a class file. The file extension is optional.

:UCM move <Source/File/Path> <Target/Directory>
    Moves a class file to a new directory. The file extension is optional.

:UCM switch
    If the current file is a header, switches to the source. If it's a
    source, switches to the header.

==============================================================================
3. Configuration                                       *UCM-configuration*

------------------------------------------------------------------------------
Setup                                                          *UCM-setup*

If you are using `lazy.nvim`, pass a configuration table to the `opts` key.

Example:
>lua
  require("UCM").setup({
    ui { picker { mode = "auto", }, },
    confirm_on_new = false,
  })
<

For details on available options, see |UCM-default-configuration|.

------------------------------------------------------------------------------
Project-specific Settings (.ucmrc)                       *UCM-ucmrc*

You can override the global configuration by creating a JSON file named
`.ucmrc` in the root directory of your project.

The options configurable in `.ucmrc` are the same as those described in
|UCM-setup|.

Example:
>json
  {
    "default_parent_class": "UObject",
    "template_rules": [
      {
        "name": "MyGameActor",
        "priority": 200,
        "parent_regex": "^AMyBaseActor$",
        "template_dir": "/path/to/my/templates",
        "header_template": "MyActor.h.tpl",
        "source_template": "MyActor.cpp.tpl",
        "class_prefix": "A"
      }
    ]
  }
<

------------------------------------------------------------------------------
Full Configuration                           *UCM-default-configuration*

The following are all configurable options with their default values.

>lua
{
  -- Select the UI frontend to use
  -- "auto": Automatically selects in the order of priority: Telescope -> fzf-lua -> native
  -- "telescope": Prioritizes Telescope (requires fd)
  -- "fzf-lua": Prioritizes fzf-lua (requires fd)
  -- "native": Uses the standard vim.ui (fd is not required)
  
  ui = {
    picker = {
      mode = "auto",
      prefer = { "telescope", "fzf_lua", "native", "dummy" },
    },
  }

  -- Which file to open after a successful 'new' command
  -- "header": Open only the header file (default)
  -- "source": Open only the source file
  -- "both":   Open the header and vsplit the source
  -- false:    Do nothing
  auto_open_on_new = "header",

  -- Whether to show a confirmation UI when running the :UCM new command
  confirm_on_new = true,
  
  -- Default parent class if not specified
  default_parent_class = "Actor",

  -- Copyright header for new files
  copyright_header_h = "// Copyright...",
  copyright_header_cpp = "// Copyright..",

  -- Template rules for class creation
  template_rules = {
    {
      name = "Actor",
      priority = 10,
      parent_regex = "^A",
      template_dir = "builtin",
      header_template = "Actor.h.tpl",
      source_template = "Actor.cpp.tpl",
      class_prefix = "A",
      uclass_specifier = "",
      base_class_name = "Actor",
      direct_includes = { '"GameFramework/Actor.h"' },
    },
    -- ... more rules
  },

  -- Rules for pairing header/source files
  folder_rules = {
    { type = "header",  regex = "^[Pp]ublic$", replacement = "Private" },
    { type = "source",  regex = "^[Pp]rivate$", replacement = "Public" },
    { type = "header",  regex = "^[Cc]lasses$", replacement = "Sources" },
    { type = "source",  regex = "^[Ss]ources$", replacement = "Classes" },
  },
}
<

==============================================================================
4. Lua API                                                     *UCM-api*

Depending on the arguments provided, *UCM.nvim* will automatically launch a UI
picker.

------------------------------------------------------------------------------
UCM.api (Core Engine)                                     *UCM-api-core*

This is a low-level API for executing pure backend processes like file
operations without any UI. Use this when you need finer control.

Require the API module:
>lua
  local ucm = require("UCM.api")
<

*ucm.new_class({opts})*
    Creates new class files.
    `opts` table:
      - `class_name` (string): (required)
      - `parent_class` (string): (required)
      - `target_dir` (string): (required)
      - `on_complete` (function, optional)
      - `on_cancel` (function, optional)
      - `on_exit` (function, optional)

*ucm.delete_class({opts})*
    Deletes class files.
    `opts` table:
      - `file_path` (string): (required)
      - `on_complete` (function, optional)
      - `on_cancel` (function, optional)
      - `on_exit` (function, optional)

*ucm.rename_class({opts})*
    Renames class files.
    `opts` table:
      - `file_path` (string): (required)
      - `new_class_name` (string): (required)
      - `on_complete` (function, optional)
      - `on_cancel` (function, optional)
      - `on_exit` (function, optional)

*ucm.switch_file({opts})*
    Switches between header/source files. This function is synchronous.
    `opts` table (required):
      - `current_file_path` (string)
    Returns: `(boolean, string|nil)` -- `(ok, err_msg)`

==============================================================================
5. Integration Examples (neo-tree)         *UCM-integration-examples*

By using the `on_complete` hook, you can perform actions like automatically
refreshing the neo-tree view after a successful file operation.

Example: key mapping settings for neo-tree
>lua
  -- ... (in your neo-tree setup) ...
  filesystem = {
    window = {
      mappings = {
        ["<leader>n"] = function(state)
          local node = state.tree:get_node()
          require("UCM.api").new_class({
            target_dir = node.path,
            on_complete = function()
              -- Refresh the tree on success
              require("neo-tree.sources.filesystem").refresh(state)
            end
          })
        end,
        ["<leader>d"] = function(state)
          local node = state.tree:get_node()
          require("UCM.api").delete_class({ file_path = node.path })
        end,
        ["<leader>r"] = function(state)
          local node = state.tree:get_node()
          require("UCM.api").rename_class({ file_path = node.path })
        end,
      },
    },
  },
  -- ...
<

==============================================================================
6. License                                                *UCM-license*

MIT License

Copyright (c) 2025 taku25

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
==============================================================================
 vim:tw=78:ts=8:ft=help:norl:
